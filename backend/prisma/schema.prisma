// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String            @id @default(uuid()) @db.Uuid
    is_profile_finished     Boolean           @default(false)
    oauth_id                String?           @unique
    username                String?           @unique
    email                   String?           @unique
    avatar                  String            @default("default.png")
    is_online               Boolean           @default(false)
    is_in_game              Boolean           @default(false)
    two_factor_auth_enabled Boolean           @default(false)
    two_factor_secret       String?           @unique
    two_factor_uuid         String?           @unique
    created_at              DateTime          @default(now())
    updated_at              DateTime          @updatedAt
    relationships1          Relationship[]    @relation("UserToRelationship1")
    relationships2          Relationship[]    @relation("UserToRelationship2")
    ChannelMembers          ChannelMember[]
    ChannelActionsActor     ChannelAction[]   @relation("ChannelActionsActor")
    ChannelActionsTarget    ChannelAction[]   @relation("ChannelActionsTarget")
    Messages                Message[]
    GamesPlayer1            Game[]            @relation("GamesPlayer1")
    GamesPlayer2            Game[]            @relation("GamesPlayer2")
    UserAchievements        UserAchievement[]
    refreshTokens           RefreshToken[]
    InviteActor             Invite[]          @relation("InviteActor")
    InviteTarget            Invite[]          @relation("InviteTarget")
}

model RefreshToken {
    token      String   @id @unique
    user_id    String   @db.Uuid
    created_at DateTime @default(now())
    User       User     @relation(fields: [user_id], references: [id])
}

model Relationship {
    id         String             @id @default(uuid()) @db.Uuid
    user1_id   String             @db.Uuid
    user2_id   String             @db.Uuid
    status     RelationshipStatus
    created_at DateTime           @default(now())
    updated_at DateTime           @updatedAt
    User1      User               @relation("UserToRelationship1", fields: [user1_id], references: [id])
    User2      User               @relation("UserToRelationship2", fields: [user2_id], references: [id])
}

model Invite {
    id         String   @id @default(uuid()) @db.Uuid
    actor_id   String   @db.Uuid
    target_id  String   @db.Uuid
    mode       String?
    start      Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    Actor      User     @relation(name: "InviteActor", fields: [actor_id], references: [id])
    Target     User     @relation(name: "InviteTarget", fields: [target_id], references: [id])
}

model Channel {
    id               String          @id @default(uuid()) @db.Uuid
    name             String
    uniqueIdentifier String?         @unique
    type             ChannelType     @default(public)
    password         String?
    created_at       DateTime        @default(now())
    updated_at       DateTime        @updatedAt
    ChannelMembers   ChannelMember[]
    ChannelActions   ChannelAction[]
    Messages         Message[]
}

model ChannelMember {
    id         String      @id @default(uuid()) @db.Uuid
    channel_id String      @db.Uuid
    user_id    String      @db.Uuid
    role       ChannelRole @default(member)
    username   String      @default("Unknown")
    avatar     String      @default("default.png")
    created_at DateTime    @default(now())
    updated_at DateTime    @updatedAt
    User       User        @relation(fields: [user_id], references: [id])
    Channel    Channel     @relation(fields: [channel_id], references: [id])

    @@unique([channel_id, user_id])
}

model ChannelAction {
    id          String     @id @default(uuid()) @db.Uuid
    channel_id  String     @db.Uuid
    actor_id    String     @db.Uuid
    target_id   String     @db.Uuid
    action_type ActionType
    mute_end_at DateTime?
    created_at  DateTime   @default(now())
    updated_at  DateTime   @updatedAt
    Actor       User       @relation(name: "ChannelActionsActor", fields: [actor_id], references: [id])
    Target      User       @relation(name: "ChannelActionsTarget", fields: [target_id], references: [id])
    Channel     Channel    @relation(fields: [channel_id], references: [id])
}

model Message {
    id          String   @id @default(uuid()) @db.Uuid
    channel_id  String   @db.Uuid
    sender_id   String   @db.Uuid
    username   String    @default("Unknown")
    avatar     String    @default("default.png")
    reply_to_id String?  @db.Uuid
    content     String
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    Sender      User     @relation(fields: [sender_id], references: [id])
    Channel     Channel  @relation(fields: [channel_id], references: [id])
}

model Game {
    id         String   @id @default(uuid()) @db.Uuid
    player1_id String   @db.Uuid
    player2_id String   @db.Uuid
    winner_id  String?  @db.Uuid
    score1     Int      @default(0)
    score2     Int      @default(0)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    Player1    User     @relation(name: "GamesPlayer1", fields: [player1_id], references: [id])
    Player2    User     @relation(name: "GamesPlayer2", fields: [player2_id], references: [id])
}

model UserAchievement {
    id             String      @id @default(uuid()) @db.Uuid
    user_id        String      @db.Uuid
    achievement_id String      @db.Uuid
    created_at     DateTime    @default(now())
    updated_at     DateTime    @updatedAt
    User           User        @relation(fields: [user_id], references: [id])
    Achievement    Achievement @relation(fields: [achievement_id], references: [id])
}

model Achievement {
    id          String            @id @default(uuid()) @db.Uuid
    name        String
    description String
    icon_url    String
    points      Int
    created_at  DateTime          @default(now())
    updated_at  DateTime          @updatedAt
    Users       UserAchievement[]
}

enum RelationshipStatus {
    pending
    friends
    blocked
}

enum ChannelType {
    public
    private
    protected
    dm
}

enum ChannelRole {
    owner
    admin
    member
}

enum ActionType {
    kick
    ban
    mute
}

enum userstatus {
    offline
    online
    ingame
}
